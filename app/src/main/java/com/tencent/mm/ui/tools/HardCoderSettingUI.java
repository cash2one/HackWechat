package com.tencent.mm.ui.tools;

import android.app.Dialog;
import android.app.TimePickerDialog;
import android.app.TimePickerDialog.OnTimeSetListener;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import com.tencent.mm.R;
import com.tencent.mm.hardcoder.HardCoderJNI;
import com.tencent.mm.pluginsdk.f;
import com.tencent.mm.pluginsdk.h.n;
import com.tencent.mm.sdk.platformtools.ac;
import com.tencent.mm.sdk.platformtools.bh;
import com.tencent.mm.sdk.platformtools.w;
import com.tencent.mm.sdk.platformtools.x;
import com.tencent.mm.ui.MMActivity;
import java.sql.Time;
import java.text.DateFormat;

public class HardCoderSettingUI extends MMActivity {
    private boolean qiO = false;
    private final OnTimeSetListener qiP = new OnTimeSetListener(this) {
        final /* synthetic */ HardCoderSettingUI zkJ;

        {
            this.zkJ = r1;
        }

        public final void onTimeSet(TimePicker timePicker, int i, int i2) {
            if (this.zkJ.qiO) {
                HardCoderJNI.hcBeginTimeHour = i;
                HardCoderJNI.hcBeginTimeMin = i2;
                this.zkJ.ziC.setText(HardCoderSettingUI.e(this.zkJ, HardCoderJNI.hcBeginTimeHour, HardCoderJNI.hcBeginTimeMin));
                return;
            }
            HardCoderJNI.hcEndTimeHour = i;
            HardCoderJNI.hcEndTimeMin = i2;
            this.zkJ.ziD.setText(HardCoderSettingUI.e(this.zkJ, HardCoderJNI.hcEndTimeHour, HardCoderJNI.hcEndTimeMin));
        }
    };
    private CheckBox ziA;
    private CheckBox ziB;
    private TextView ziC;
    private TextView ziD;
    private CheckBox ziE;
    private EditText ziF;
    private EditText ziG;
    private EditText ziH;
    private Spinner ziI;
    private Spinner ziJ;
    private CheckBox ziK;
    private CheckBox ziL;
    private EditText ziM;
    private EditText ziN;
    private EditText ziO;
    private Spinner ziP;
    private Spinner ziQ;
    private CheckBox ziR;
    private CheckBox ziS;
    private EditText ziT;
    private EditText ziU;
    private EditText ziV;
    private Spinner ziW;
    private Spinner ziX;
    private CheckBox ziY;
    private CheckBox ziZ;
    private CheckBox zix;
    private EditText ziy;
    private CheckBox ziz;
    private CheckBox zjA;
    private EditText zjB;
    private CheckBox zjC;
    private EditText zjD;
    private EditText zjE;
    private EditText zjF;
    private EditText zjG;
    private EditText zjH;
    private EditText zjI;
    private Spinner zjJ;
    private Spinner zjK;
    private CheckBox zjL;
    private CheckBox zjM;
    private EditText zjN;
    private EditText zjO;
    private EditText zjP;
    private Spinner zjQ;
    private Spinner zjR;
    private CheckBox zjS;
    private CheckBox zjT;
    private EditText zjU;
    private EditText zjV;
    private EditText zjW;
    private Spinner zjX;
    private Spinner zjY;
    private CheckBox zjZ;
    private EditText zja;
    private EditText zjb;
    private EditText zjc;
    private Spinner zjd;
    private Spinner zje;
    private CheckBox zjf;
    private CheckBox zjg;
    private EditText zjh;
    private EditText zji;
    private EditText zjj;
    private Spinner zjk;
    private Spinner zjl;
    private CheckBox zjm;
    private CheckBox zjn;
    private EditText zjo;
    private EditText zjp;
    private EditText zjq;
    private Spinner zjr;
    private Spinner zjs;
    private CheckBox zjt;
    private CheckBox zju;
    private EditText zjv;
    private EditText zjw;
    private EditText zjx;
    private Spinner zjy;
    private Spinner zjz;
    private Spinner zkA;
    private CheckBox zkB;
    private CheckBox zkC;
    private EditText zkD;
    private EditText zkE;
    private EditText zkF;
    private Spinner zkG;
    private Spinner zkH;
    private CheckBox zkI;
    private CheckBox zka;
    private EditText zkb;
    private EditText zkc;
    private EditText zkd;
    private Spinner zke;
    private Spinner zkf;
    private CheckBox zkg;
    private CheckBox zkh;
    private EditText zki;
    private EditText zkj;
    private EditText zkk;
    private Spinner zkl;
    private Spinner zkm;
    private CheckBox zkn;
    private CheckBox zko;
    private EditText zkp;
    private EditText zkq;
    private EditText zkr;
    private Spinner zks;
    private Spinner zkt;
    private CheckBox zku;
    private CheckBox zkv;
    private EditText zkw;
    private EditText zkx;
    private EditText zky;
    private Spinner zkz;

    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setMMTitle(R.l.eLw);
        setBackBtn(new 1(this));
        SharedPreferences sharedPreferences = this.mController.xIM.getSharedPreferences(HardCoderJNI.SETTING_SP_FILE, 0);
        if (!sharedPreferences.contains(HardCoderJNI.KEY_HC_ENABLE)) {
            a(sharedPreferences.edit().putBoolean(HardCoderJNI.KEY_HC_ENABLE, true));
        }
        this.ziz = (CheckBox) findViewById(R.h.bVJ);
        this.ziz.setChecked(HardCoderJNI.hcDebug);
        this.zix = (CheckBox) findViewById(R.h.bVP);
        this.zix.setChecked(HardCoderJNI.hcEnable);
        this.ziy = (EditText) findViewById(R.h.cHR);
        this.ziy.setText(HardCoderJNI.hcRetryInterval);
        this.ziA = (CheckBox) findViewById(R.h.bVH);
        this.ziA.setChecked(HardCoderJNI.hcSwitchEnable);
        this.ziB = (CheckBox) findViewById(R.h.bVL);
        this.ziB.setChecked(HardCoderJNI.hcTimeLimit);
        this.ziC = (TextView) findViewById(R.h.bMM);
        this.ziD = (TextView) findViewById(R.h.cey);
        this.ziC.setText(e(this, HardCoderJNI.hcBeginTimeHour, HardCoderJNI.hcBeginTimeMin));
        this.ziD.setText(e(this, HardCoderJNI.hcEndTimeHour, HardCoderJNI.hcEndTimeMin));
        this.ziC.setOnClickListener(new 2(this));
        this.ziD.setOnClickListener(new 3(this));
        this.ziE = (CheckBox) findViewById(R.h.bVG);
        this.ziE.setChecked(HardCoderJNI.hcBootEnable);
        this.ziF = (EditText) findViewById(R.h.cav);
        this.ziF.setText(HardCoderJNI.hcBootDelay);
        this.ziG = (EditText) findViewById(R.h.cRu);
        this.ziG.setText(HardCoderJNI.hcBootTimeout);
        this.ziG.setSelection(this.ziG.getText().length());
        this.ziH = (EditText) findViewById(R.h.bIC);
        this.ziH.setText(HardCoderJNI.hcBootAction);
        this.ziI = (Spinner) findViewById(R.h.bZy);
        this.ziI.setSelection(HardCoderJNI.hcBootCPU);
        this.ziJ = (Spinner) findViewById(R.h.cqN);
        this.ziJ.setSelection(HardCoderJNI.hcBootIO);
        this.ziK = (CheckBox) findViewById(R.h.cQR);
        this.ziK.setChecked(HardCoderJNI.hcBootThr);
        this.ziL = (CheckBox) findViewById(R.h.bVM);
        this.ziL.setChecked(HardCoderJNI.hcEnterChattingEnable);
        this.ziM = (EditText) findViewById(R.h.caz);
        this.ziM.setText(HardCoderJNI.hcEnterChattingDelay);
        this.ziN = (EditText) findViewById(R.h.cRy);
        this.ziN.setText(HardCoderJNI.hcEnterChattingTimeout);
        this.ziN.setSelection(this.ziN.getText().length());
        this.ziO = (EditText) findViewById(R.h.bIG);
        this.ziO.setText(HardCoderJNI.hcEnterChattingAction);
        this.ziP = (Spinner) findViewById(R.h.bZB);
        this.ziP.setSelection(HardCoderJNI.hcEnterChattingCPU);
        this.ziQ = (Spinner) findViewById(R.h.cqQ);
        this.ziQ.setSelection(HardCoderJNI.hcEnterChattingIO);
        this.ziR = (CheckBox) findViewById(R.h.cQU);
        this.ziR.setChecked(HardCoderJNI.hcEnterChattingThr);
        this.ziS = (CheckBox) findViewById(R.h.bVR);
        this.ziS.setChecked(HardCoderJNI.hcQuitChattingEnable);
        this.ziT = (EditText) findViewById(R.h.caD);
        this.ziT.setText(HardCoderJNI.hcQuitChattingDelay);
        this.ziU = (EditText) findViewById(R.h.cRC);
        this.ziU.setText(HardCoderJNI.hcQuitChattingTimeout);
        this.ziU.setSelection(this.ziU.getText().length());
        this.ziV = (EditText) findViewById(R.h.bIL);
        this.ziV.setText(HardCoderJNI.hcQuitChattingAction);
        this.ziW = (Spinner) findViewById(R.h.bZF);
        this.ziW.setSelection(HardCoderJNI.hcQuitChattingCPU);
        this.ziX = (Spinner) findViewById(R.h.cqU);
        this.ziX.setSelection(HardCoderJNI.hcQuitChattingIO);
        this.ziY = (CheckBox) findViewById(R.h.cQY);
        this.ziY.setChecked(HardCoderJNI.hcQuitChattingThr);
        this.ziZ = (CheckBox) findViewById(R.h.bVT);
        this.ziZ.setChecked(HardCoderJNI.hcSendMsgEnable);
        this.zja = (EditText) findViewById(R.h.caF);
        this.zja.setText(HardCoderJNI.hcSendMsgDelay);
        this.zjb = (EditText) findViewById(R.h.cRE);
        this.zjb.setText(HardCoderJNI.hcSendMsgTimeout);
        this.zjb.setSelection(this.zjb.getText().length());
        this.zjc = (EditText) findViewById(R.h.bIN);
        this.zjc.setText(HardCoderJNI.hcSendMsgAction);
        this.zjd = (Spinner) findViewById(R.h.bZH);
        this.zjd.setSelection(HardCoderJNI.hcSendMsgCPU);
        this.zje = (Spinner) findViewById(R.h.cqW);
        this.zje.setSelection(HardCoderJNI.hcSendMsgIO);
        this.zjf = (CheckBox) findViewById(R.h.cRa);
        this.zjf.setChecked(HardCoderJNI.hcSendMsgThr);
        this.zjg = (CheckBox) findViewById(R.h.bVU);
        this.zjg.setChecked(HardCoderJNI.hcSendPicMsgEnable);
        this.zjh = (EditText) findViewById(R.h.caG);
        this.zjh.setText(HardCoderJNI.hcSendPicMsgDelay);
        this.zji = (EditText) findViewById(R.h.cRF);
        this.zji.setText(HardCoderJNI.hcSendPicMsgTimeout);
        this.zji.setSelection(this.zji.getText().length());
        this.zjj = (EditText) findViewById(R.h.bIO);
        this.zjj.setText(HardCoderJNI.hcSendPicMsgAction);
        this.zjk = (Spinner) findViewById(R.h.bZI);
        this.zjk.setSelection(HardCoderJNI.hcSendPicMsgCPU);
        this.zjl = (Spinner) findViewById(R.h.cqX);
        this.zjl.setSelection(HardCoderJNI.hcSendPicMsgIO);
        this.zjm = (CheckBox) findViewById(R.h.cRb);
        this.zjm.setChecked(HardCoderJNI.hcSendPicMsgThr);
        this.zjn = (CheckBox) findViewById(R.h.bVS);
        this.zjn.setChecked(HardCoderJNI.hcReceiveMsgEnable);
        this.zjo = (EditText) findViewById(R.h.caE);
        this.zjo.setText(HardCoderJNI.hcReceiveMsgDelay);
        this.zjp = (EditText) findViewById(R.h.cRD);
        this.zjp.setText(HardCoderJNI.hcReceiveMsgTimeout);
        this.zjp.setSelection(this.zjp.getText().length());
        this.zjq = (EditText) findViewById(R.h.bIM);
        this.zjq.setText(HardCoderJNI.hcReceiveMsgAction);
        this.zjr = (Spinner) findViewById(R.h.bZG);
        this.zjr.setSelection(HardCoderJNI.hcReceiveMsgCPU);
        this.zjs = (Spinner) findViewById(R.h.cqV);
        this.zjs.setSelection(HardCoderJNI.hcReceiveMsgIO);
        this.zjt = (CheckBox) findViewById(R.h.cQZ);
        this.zjt.setChecked(HardCoderJNI.hcReceiveMsgThr);
        this.zju = (CheckBox) findViewById(R.h.bVX);
        this.zju.setChecked(HardCoderJNI.hcUpdateChatroomEnable);
        this.zjv = (EditText) findViewById(R.h.caI);
        this.zjv.setText(HardCoderJNI.hcUpdateChatroomDelay);
        this.zjw = (EditText) findViewById(R.h.cRH);
        this.zjw.setText(HardCoderJNI.hcUpdateChatroomTimeout);
        this.zjw.setSelection(this.zjw.getText().length());
        this.zjx = (EditText) findViewById(R.h.bIQ);
        this.zjx.setText(HardCoderJNI.hcUpdateChatroomAction);
        this.zjy = (Spinner) findViewById(R.h.bZK);
        this.zjy.setSelection(HardCoderJNI.hcUpdateChatroomCPU);
        this.zjz = (Spinner) findViewById(R.h.cqZ);
        this.zjz.setSelection(HardCoderJNI.hcUpdateChatroomIO);
        this.zjA = (CheckBox) findViewById(R.h.cRd);
        this.zjA.setChecked(HardCoderJNI.hcUpdateChatroomThr);
        this.zjB = (EditText) findViewById(R.h.cTQ);
        this.zjB.setText(HardCoderJNI.hcUpdateChatroomMemberCount);
        this.zjC = (CheckBox) findViewById(R.h.bVI);
        this.zjC.setChecked(HardCoderJNI.hcDBEnable);
        this.zjD = (EditText) findViewById(R.h.caw);
        this.zjD.setText(HardCoderJNI.hcDBDelayQuery);
        this.zjE = (EditText) findViewById(R.h.cax);
        this.zjE.setText(HardCoderJNI.hcDBDelayWrite);
        this.zjF = (EditText) findViewById(R.h.cRv);
        this.zjF.setText(HardCoderJNI.hcDBTimeout);
        this.zjG = (EditText) findViewById(R.h.cRw);
        this.zjG.setText(HardCoderJNI.hcDBTimeoutBusy);
        this.zjH = (EditText) findViewById(R.h.bID);
        this.zjH.setText(HardCoderJNI.hcDBActionQuery);
        this.zjI = (EditText) findViewById(R.h.bIE);
        this.zjI.setText(HardCoderJNI.hcDBActionWrite);
        this.zjJ = (Spinner) findViewById(R.h.bZz);
        this.zjJ.setSelection(HardCoderJNI.hcDBCPU);
        this.zjK = (Spinner) findViewById(R.h.cqO);
        this.zjK.setSelection(HardCoderJNI.hcDBIO);
        this.zjL = (CheckBox) findViewById(R.h.cQS);
        this.zjL.setChecked(HardCoderJNI.hcDBThr);
        this.zjM = (CheckBox) findViewById(R.h.bVY);
        this.zjM.setChecked(HardCoderJNI.hcEncodeVideoEnable);
        this.zjN = (EditText) findViewById(R.h.caJ);
        this.zjN.setText(HardCoderJNI.hcEncodeVideoDelay);
        this.zjO = (EditText) findViewById(R.h.cRI);
        this.zjO.setText(HardCoderJNI.hcEncodeVideoTimeout);
        this.zjP = (EditText) findViewById(R.h.bIR);
        this.zjP.setText(HardCoderJNI.hcEncodeVideoAction);
        this.zjQ = (Spinner) findViewById(R.h.bZL);
        this.zjQ.setSelection(HardCoderJNI.hcEncodeVideoCPU);
        this.zjR = (Spinner) findViewById(R.h.cra);
        this.zjR.setSelection(HardCoderJNI.hcEncodeVideoIO);
        this.zjS = (CheckBox) findViewById(R.h.cRe);
        this.zjS.setChecked(HardCoderJNI.hcEncodeVideoThr);
        this.zjT = (CheckBox) findViewById(R.h.bVK);
        this.zjT.setChecked(HardCoderJNI.hcDecodePicEnable);
        this.zjU = (EditText) findViewById(R.h.cay);
        this.zjU.setText(HardCoderJNI.hcDecodePicDelay);
        this.zjV = (EditText) findViewById(R.h.cRx);
        this.zjV.setText(HardCoderJNI.hcDecodePicTimeout);
        this.zjW = (EditText) findViewById(R.h.bIF);
        this.zjW.setText(HardCoderJNI.hcDecodePicAction);
        this.zjX = (Spinner) findViewById(R.h.bZA);
        this.zjX.setSelection(HardCoderJNI.hcDecodePicCPU);
        this.zjY = (Spinner) findViewById(R.h.cqP);
        this.zjY.setSelection(HardCoderJNI.hcDecodePicIO);
        this.zjZ = (CheckBox) findViewById(R.h.cQT);
        this.zjZ.setChecked(HardCoderJNI.hcDecodePicThr);
        this.zka = (CheckBox) findViewById(R.h.bVN);
        this.zka.setChecked(HardCoderJNI.hcGifEnable);
        this.zkb = (EditText) findViewById(R.h.caA);
        this.zkb.setText(HardCoderJNI.hcGifDelay);
        this.zkc = (EditText) findViewById(R.h.cRz);
        this.zkc.setText(HardCoderJNI.hcGifTimeout);
        this.zkd = (EditText) findViewById(R.h.bIH);
        this.zkd.setText(HardCoderJNI.hcGifAction);
        this.zke = (Spinner) findViewById(R.h.bZC);
        this.zke.setSelection(HardCoderJNI.hcGifCPU);
        this.zkf = (Spinner) findViewById(R.h.cqR);
        this.zkf.setSelection(HardCoderJNI.hcGifIO);
        this.zkg = (CheckBox) findViewById(R.h.cQV);
        this.zkg.setChecked(HardCoderJNI.hcGifThr);
        this.zkh = (CheckBox) findViewById(R.h.bVO);
        this.zkh.setChecked(HardCoderJNI.hcGifFrameEnable);
        this.zki = (EditText) findViewById(R.h.caB);
        this.zki.setText(HardCoderJNI.hcGifFrameDelay);
        this.zkj = (EditText) findViewById(R.h.cRA);
        this.zkj.setText(HardCoderJNI.hcGifFrameTimeout);
        this.zkk = (EditText) findViewById(R.h.bII);
        this.zkk.setText(HardCoderJNI.hcGifFrameAction);
        this.zkl = (Spinner) findViewById(R.h.bZD);
        this.zkl.setSelection(HardCoderJNI.hcGifFrameCPU);
        this.zkm = (Spinner) findViewById(R.h.cqS);
        this.zkm.setSelection(HardCoderJNI.hcGifFrameIO);
        this.zkn = (CheckBox) findViewById(R.h.cQW);
        this.zkn.setChecked(HardCoderJNI.hcGifFrameThr);
        this.zko = (CheckBox) findViewById(R.h.bVV);
        this.zko.setChecked(HardCoderJNI.hcSNSScrollEnable);
        this.zkp = (EditText) findViewById(R.h.caH);
        this.zkp.setText(HardCoderJNI.hcSNSScrollDelay);
        this.zkq = (EditText) findViewById(R.h.cRG);
        this.zkq.setText(HardCoderJNI.hcSNSScrollTimeout);
        this.zkr = (EditText) findViewById(R.h.bIP);
        this.zkr.setText(HardCoderJNI.hcSNSScrollAction);
        this.zks = (Spinner) findViewById(R.h.bZJ);
        this.zks.setSelection(HardCoderJNI.hcSNSScrollCPU);
        this.zkt = (Spinner) findViewById(R.h.cqY);
        this.zkt.setSelection(HardCoderJNI.hcSNSScrollIO);
        this.zku = (CheckBox) findViewById(R.h.cRc);
        this.zku.setChecked(HardCoderJNI.hcSNSScrollThr);
        this.zkv = (CheckBox) findViewById(R.h.bVQ);
        this.zkv.setChecked(HardCoderJNI.hcMediaGalleryScrollEnable);
        this.zkw = (EditText) findViewById(R.h.caC);
        this.zkw.setText(HardCoderJNI.hcMediaGalleryScrollDelay);
        this.zkx = (EditText) findViewById(R.h.cRB);
        this.zkx.setText(HardCoderJNI.hcMediaGalleryScrollTimeout);
        this.zky = (EditText) findViewById(R.h.bIJ);
        this.zky.setText(HardCoderJNI.hcMediaGalleryScrollAction);
        this.zkz = (Spinner) findViewById(R.h.bZE);
        this.zkz.setSelection(HardCoderJNI.hcMediaGalleryScrollCPU);
        this.zkA = (Spinner) findViewById(R.h.cqT);
        this.zkA.setSelection(HardCoderJNI.hcMediaGalleryScrollIO);
        this.zkB = (CheckBox) findViewById(R.h.cQX);
        this.zkB.setChecked(HardCoderJNI.hcMediaGalleryScrollThr);
        this.zkC = (CheckBox) findViewById(R.h.bVF);
        this.zkC.setChecked(HardCoderJNI.hcAlbumScrollEnable);
        this.zkD = (EditText) findViewById(R.h.cau);
        this.zkD.setText(HardCoderJNI.hcAlbumScrollDelay);
        this.zkE = (EditText) findViewById(R.h.cRt);
        this.zkE.setText(HardCoderJNI.hcAlbumScrollTimeout);
        this.zkF = (EditText) findViewById(R.h.bIB);
        this.zkF.setText(HardCoderJNI.hcAlbumScrollAction);
        this.zkG = (Spinner) findViewById(R.h.bZx);
        this.zkG.setSelection(HardCoderJNI.hcAlbumScrollCPU);
        this.zkH = (Spinner) findViewById(R.h.cqM);
        this.zkH.setSelection(HardCoderJNI.hcAlbumScrollIO);
        this.zkI = (CheckBox) findViewById(R.h.cQQ);
        this.zkI.setChecked(HardCoderJNI.hcAlbumScrollThr);
        this.zix.setOnClickListener(new 4(this));
    }

    protected Dialog onCreateDialog(int i) {
        switch (i) {
            case 1:
                if (this.qiO) {
                    return new TimePickerDialog(this.mController.xIM, this.qiP, HardCoderJNI.hcBeginTimeHour, HardCoderJNI.hcBeginTimeMin, false);
                }
                return new TimePickerDialog(this.mController.xIM, this.qiP, HardCoderJNI.hcEndTimeHour, HardCoderJNI.hcBeginTimeMin, false);
            default:
                return null;
        }
    }

    protected void onDestroy() {
        x.i("HardCoderSettingUI", "save");
        if (this.zix.isChecked() && !HardCoderJNI.hcEnable) {
            HardCoderJNI.hcEnable = this.zix.isChecked();
            HardCoderJNI.initHardCoder();
            HardCoderJNI.initReporter(new f());
        }
        HardCoderJNI.hcDebug = this.ziz.isChecked();
        HardCoderJNI.hcEnable = this.zix.isChecked();
        HardCoderJNI.hcRetryInterval = bh.getInt(this.ziy.getText().toString(), HardCoderJNI.hcRetryInterval);
        if (HardCoderJNI.checkEnv) {
            HardCoderJNI.setDebug(HardCoderJNI.hcDebug);
            HardCoderJNI.setHCEnable(HardCoderJNI.hcEnable);
            HardCoderJNI.setRetryConnectInterval(HardCoderJNI.hcRetryInterval);
        }
        HardCoderJNI.hcSwitchEnable = this.ziA.isChecked();
        HardCoderJNI.hcTimeLimit = this.ziB.isChecked();
        HardCoderJNI.hcBootEnable = this.ziE.isChecked();
        HardCoderJNI.hcBootDelay = bh.getInt(this.ziF.getText().toString(), HardCoderJNI.hcBootDelay);
        HardCoderJNI.hcBootCPU = this.ziI.getSelectedItemPosition();
        HardCoderJNI.hcBootIO = this.ziJ.getSelectedItemPosition();
        HardCoderJNI.hcBootThr = this.ziK.isChecked();
        HardCoderJNI.hcBootTimeout = bh.getInt(this.ziG.getText().toString(), HardCoderJNI.hcBootTimeout);
        HardCoderJNI.hcBootAction = bh.getLong(this.ziH.getText().toString(), HardCoderJNI.hcBootAction);
        HardCoderJNI.hcEnterChattingEnable = this.ziL.isChecked();
        HardCoderJNI.hcEnterChattingDelay = bh.getInt(this.ziM.getText().toString(), HardCoderJNI.hcEnterChattingDelay);
        HardCoderJNI.hcEnterChattingCPU = this.ziP.getSelectedItemPosition();
        HardCoderJNI.hcEnterChattingIO = this.ziQ.getSelectedItemPosition();
        HardCoderJNI.hcEnterChattingThr = this.ziR.isChecked();
        HardCoderJNI.hcEnterChattingTimeout = bh.getInt(this.ziN.getText().toString(), HardCoderJNI.hcEnterChattingTimeout);
        HardCoderJNI.hcEnterChattingAction = bh.getLong(this.ziO.getText().toString(), HardCoderJNI.hcEnterChattingAction);
        HardCoderJNI.hcQuitChattingEnable = this.ziS.isChecked();
        HardCoderJNI.hcQuitChattingDelay = bh.getInt(this.ziT.getText().toString(), HardCoderJNI.hcQuitChattingDelay);
        HardCoderJNI.hcQuitChattingCPU = this.ziW.getSelectedItemPosition();
        HardCoderJNI.hcQuitChattingIO = this.ziX.getSelectedItemPosition();
        HardCoderJNI.hcQuitChattingThr = this.ziY.isChecked();
        HardCoderJNI.hcQuitChattingTimeout = bh.getInt(this.ziU.getText().toString(), HardCoderJNI.hcQuitChattingTimeout);
        HardCoderJNI.hcQuitChattingAction = bh.getLong(this.ziV.getText().toString(), HardCoderJNI.hcQuitChattingAction);
        HardCoderJNI.hcSendMsgEnable = this.ziZ.isChecked();
        HardCoderJNI.hcSendMsgDelay = bh.getInt(this.zja.getText().toString(), HardCoderJNI.hcSendMsgDelay);
        HardCoderJNI.hcSendMsgCPU = this.zjd.getSelectedItemPosition();
        HardCoderJNI.hcSendMsgIO = this.zje.getSelectedItemPosition();
        HardCoderJNI.hcSendMsgThr = this.zjf.isChecked();
        HardCoderJNI.hcSendMsgTimeout = bh.getInt(this.zjb.getText().toString(), HardCoderJNI.hcSendMsgTimeout);
        HardCoderJNI.hcSendMsgAction = bh.getLong(this.zjc.getText().toString(), HardCoderJNI.hcSendMsgAction);
        HardCoderJNI.hcSendPicMsgEnable = this.zjg.isChecked();
        HardCoderJNI.hcSendPicMsgDelay = bh.getInt(this.zjh.getText().toString(), HardCoderJNI.hcSendPicMsgDelay);
        HardCoderJNI.hcSendPicMsgCPU = this.zjk.getSelectedItemPosition();
        HardCoderJNI.hcSendPicMsgIO = this.zjl.getSelectedItemPosition();
        HardCoderJNI.hcSendPicMsgThr = this.zjm.isChecked();
        HardCoderJNI.hcSendPicMsgTimeout = bh.getInt(this.zji.getText().toString(), HardCoderJNI.hcSendPicMsgTimeout);
        HardCoderJNI.hcSendPicMsgAction = bh.getLong(this.zjj.getText().toString(), HardCoderJNI.hcSendPicMsgAction);
        HardCoderJNI.hcReceiveMsgEnable = this.zjn.isChecked();
        HardCoderJNI.hcReceiveMsgDelay = bh.getInt(this.zjo.getText().toString(), HardCoderJNI.hcReceiveMsgDelay);
        HardCoderJNI.hcReceiveMsgCPU = this.zjr.getSelectedItemPosition();
        HardCoderJNI.hcReceiveMsgIO = this.zjs.getSelectedItemPosition();
        HardCoderJNI.hcReceiveMsgThr = this.zjt.isChecked();
        HardCoderJNI.hcReceiveMsgTimeout = bh.getInt(this.zjp.getText().toString(), HardCoderJNI.hcReceiveMsgTimeout);
        HardCoderJNI.hcReceiveMsgAction = bh.getLong(this.zjq.getText().toString(), HardCoderJNI.hcReceiveMsgAction);
        HardCoderJNI.hcUpdateChatroomEnable = this.zju.isChecked();
        HardCoderJNI.hcUpdateChatroomDelay = bh.getInt(this.zjv.getText().toString(), HardCoderJNI.hcUpdateChatroomDelay);
        HardCoderJNI.hcUpdateChatroomCPU = this.zjy.getSelectedItemPosition();
        HardCoderJNI.hcUpdateChatroomIO = this.zjz.getSelectedItemPosition();
        HardCoderJNI.hcUpdateChatroomThr = this.zjA.isChecked();
        HardCoderJNI.hcUpdateChatroomTimeout = bh.getInt(this.zjw.getText().toString(), HardCoderJNI.hcUpdateChatroomTimeout);
        HardCoderJNI.hcUpdateChatroomAction = bh.getLong(this.zjx.getText().toString(), HardCoderJNI.hcUpdateChatroomAction);
        HardCoderJNI.hcUpdateChatroomMemberCount = bh.getLong(this.zjB.getText().toString(), HardCoderJNI.hcUpdateChatroomMemberCount);
        HardCoderJNI.hcDBEnable = this.zjC.isChecked();
        HardCoderJNI.hcDBDelayQuery = bh.getInt(this.zjD.getText().toString(), HardCoderJNI.hcDBDelayQuery);
        HardCoderJNI.hcDBDelayWrite = bh.getInt(this.zjE.getText().toString(), HardCoderJNI.hcDBDelayWrite);
        HardCoderJNI.hcDBCPU = this.ziI.getSelectedItemPosition();
        HardCoderJNI.hcDBIO = this.ziJ.getSelectedItemPosition();
        HardCoderJNI.hcDBThr = this.ziK.isChecked();
        HardCoderJNI.hcDBTimeout = bh.getInt(this.zjF.getText().toString(), HardCoderJNI.hcDBTimeout);
        HardCoderJNI.hcDBTimeoutBusy = bh.getInt(this.zjG.getText().toString(), HardCoderJNI.hcDBTimeoutBusy);
        HardCoderJNI.hcDBActionQuery = bh.getLong(this.zjH.getText().toString(), HardCoderJNI.hcDBActionQuery);
        HardCoderJNI.hcDBActionWrite = bh.getLong(this.zjI.getText().toString(), HardCoderJNI.hcDBActionWrite);
        HardCoderJNI.hcEncodeVideoEnable = this.zjM.isChecked();
        HardCoderJNI.hcEncodeVideoDelay = bh.getInt(this.zjN.getText().toString(), HardCoderJNI.hcEncodeVideoDelay);
        HardCoderJNI.hcEncodeVideoCPU = this.zjQ.getSelectedItemPosition();
        HardCoderJNI.hcEncodeVideoIO = this.zjR.getSelectedItemPosition();
        HardCoderJNI.hcEncodeVideoThr = this.zjS.isChecked();
        HardCoderJNI.hcEncodeVideoTimeout = bh.getInt(this.zjO.getText().toString(), HardCoderJNI.hcEncodeVideoTimeout);
        HardCoderJNI.hcEncodeVideoAction = bh.getLong(this.zjP.getText().toString(), HardCoderJNI.hcEncodeVideoAction);
        HardCoderJNI.hcDecodePicEnable = this.zjT.isChecked();
        HardCoderJNI.hcDecodePicDelay = bh.getInt(this.zjU.getText().toString(), HardCoderJNI.hcDecodePicDelay);
        HardCoderJNI.hcDecodePicCPU = this.zjX.getSelectedItemPosition();
        HardCoderJNI.hcDecodePicIO = this.zjY.getSelectedItemPosition();
        HardCoderJNI.hcDecodePicThr = this.zjZ.isChecked();
        HardCoderJNI.hcDecodePicTimeout = bh.getInt(this.zjV.getText().toString(), HardCoderJNI.hcDecodePicTimeout);
        HardCoderJNI.hcDecodePicAction = bh.getLong(this.zjW.getText().toString(), HardCoderJNI.hcDecodePicAction);
        HardCoderJNI.hcGifEnable = this.zka.isChecked();
        HardCoderJNI.hcGifDelay = bh.getInt(this.zkb.getText().toString(), HardCoderJNI.hcGifDelay);
        HardCoderJNI.hcGifCPU = this.zke.getSelectedItemPosition();
        HardCoderJNI.hcGifIO = this.zkf.getSelectedItemPosition();
        HardCoderJNI.hcGifThr = this.zkg.isChecked();
        HardCoderJNI.hcGifTimeout = bh.getInt(this.zkc.getText().toString(), HardCoderJNI.hcGifTimeout);
        HardCoderJNI.hcGifAction = bh.getLong(this.zkd.getText().toString(), HardCoderJNI.hcGifAction);
        HardCoderJNI.hcGifFrameEnable = this.zkh.isChecked();
        HardCoderJNI.hcGifFrameDelay = bh.getInt(this.zki.getText().toString(), HardCoderJNI.hcGifFrameDelay);
        HardCoderJNI.hcGifFrameCPU = this.zkl.getSelectedItemPosition();
        HardCoderJNI.hcGifFrameIO = this.zkm.getSelectedItemPosition();
        HardCoderJNI.hcGifFrameThr = this.zkn.isChecked();
        HardCoderJNI.hcGifFrameTimeout = bh.getInt(this.zkj.getText().toString(), HardCoderJNI.hcGifFrameTimeout);
        HardCoderJNI.hcGifFrameAction = bh.getLong(this.zkk.getText().toString(), HardCoderJNI.hcGifFrameAction);
        HardCoderJNI.hcSNSScrollEnable = this.zko.isChecked();
        HardCoderJNI.hcSNSScrollDelay = bh.getInt(this.zkp.getText().toString(), HardCoderJNI.hcSNSScrollDelay);
        HardCoderJNI.hcSNSScrollCPU = this.zks.getSelectedItemPosition();
        HardCoderJNI.hcSNSScrollIO = this.zkt.getSelectedItemPosition();
        HardCoderJNI.hcSNSScrollThr = this.zku.isChecked();
        HardCoderJNI.hcSNSScrollTimeout = bh.getInt(this.zkq.getText().toString(), HardCoderJNI.hcSNSScrollTimeout);
        HardCoderJNI.hcSNSScrollAction = bh.getLong(this.zkr.getText().toString(), HardCoderJNI.hcSNSScrollAction);
        HardCoderJNI.hcMediaGalleryScrollEnable = this.zkv.isChecked();
        HardCoderJNI.hcMediaGalleryScrollDelay = bh.getInt(this.zkw.getText().toString(), HardCoderJNI.hcMediaGalleryScrollDelay);
        HardCoderJNI.hcMediaGalleryScrollCPU = this.zkz.getSelectedItemPosition();
        HardCoderJNI.hcMediaGalleryScrollIO = this.zkA.getSelectedItemPosition();
        HardCoderJNI.hcMediaGalleryScrollThr = this.zkB.isChecked();
        HardCoderJNI.hcMediaGalleryScrollTimeout = bh.getInt(this.zkx.getText().toString(), HardCoderJNI.hcMediaGalleryScrollTimeout);
        HardCoderJNI.hcMediaGalleryScrollAction = bh.getLong(this.zky.getText().toString(), HardCoderJNI.hcMediaGalleryScrollAction);
        HardCoderJNI.hcAlbumScrollEnable = this.zkC.isChecked();
        HardCoderJNI.hcAlbumScrollDelay = bh.getInt(this.zkD.getText().toString(), HardCoderJNI.hcAlbumScrollDelay);
        HardCoderJNI.hcAlbumScrollCPU = this.zkG.getSelectedItemPosition();
        HardCoderJNI.hcAlbumScrollIO = this.zkH.getSelectedItemPosition();
        HardCoderJNI.hcAlbumScrollThr = this.zkI.isChecked();
        HardCoderJNI.hcAlbumScrollTimeout = bh.getInt(this.zkE.getText().toString(), HardCoderJNI.hcAlbumScrollTimeout);
        HardCoderJNI.hcAlbumScrollAction = bh.getLong(this.zkF.getText().toString(), HardCoderJNI.hcAlbumScrollAction);
        a(this.mController.xIM.getSharedPreferences(HardCoderJNI.SETTING_SP_FILE, 0).edit());
        HardCoderJNI.reloadSPConfig(HardCoderJNI.RELOAD_SCENE_SETTING);
        super.onDestroy();
    }

    private static void a(Editor editor) {
        editor.putBoolean(HardCoderJNI.KEY_HC_ENABLE, HardCoderJNI.hcEnable);
        editor.putBoolean(HardCoderJNI.KEY_HC_DEBUG, HardCoderJNI.hcDebug);
        editor.putInt(HardCoderJNI.KEY_HC_RETRY_INTERVAL, HardCoderJNI.hcRetryInterval);
        editor.putBoolean(HardCoderJNI.KEY_HC_SWITCH_ENABLE, HardCoderJNI.hcSwitchEnable);
        editor.putBoolean(HardCoderJNI.KEY_HC_TIME_LIMIT, HardCoderJNI.hcTimeLimit);
        editor.putInt(HardCoderJNI.KEY_HC_BEGIN_TIME_HOUR, HardCoderJNI.hcBeginTimeHour);
        editor.putInt(HardCoderJNI.KEY_HC_BEGIN_TIME_MIN, HardCoderJNI.hcBeginTimeMin);
        editor.putInt(HardCoderJNI.KEY_HC_END_TIME_HOUR, HardCoderJNI.hcEndTimeHour);
        editor.putInt(HardCoderJNI.KEY_HC_END_TIME_MIN, HardCoderJNI.hcEndTimeMin);
        editor.putBoolean(HardCoderJNI.KEY_HC_BOOT_ENABLE, HardCoderJNI.hcBootEnable);
        editor.putInt(HardCoderJNI.KEY_HC_BOOT_DELEY, HardCoderJNI.hcBootDelay);
        editor.putInt(HardCoderJNI.KEY_HC_BOOT_CPU, HardCoderJNI.hcBootCPU);
        editor.putInt(HardCoderJNI.KEY_HC_BOOT_IO, HardCoderJNI.hcBootIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_BOOT_THR, HardCoderJNI.hcBootThr);
        editor.putInt(HardCoderJNI.KEY_HC_BOOT_TIMEOUT, HardCoderJNI.hcBootTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_BOOT_ACTION, HardCoderJNI.hcBootAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_ENTER_CHATTING_ENABLE, HardCoderJNI.hcEnterChattingEnable);
        editor.putInt(HardCoderJNI.KEY_HC_ENTER_CHATTING_DELEY, HardCoderJNI.hcEnterChattingDelay);
        editor.putInt(HardCoderJNI.KEY_HC_ENTER_CHATTING_CPU, HardCoderJNI.hcEnterChattingCPU);
        editor.putInt(HardCoderJNI.KEY_HC_ENTER_CHATTING_IO, HardCoderJNI.hcEnterChattingIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_ENTER_CHATTING_THR, HardCoderJNI.hcEnterChattingThr);
        editor.putInt(HardCoderJNI.KEY_HC_ENTER_CHATTING_TIMEOUT, HardCoderJNI.hcEnterChattingTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_ENTER_CHATTING_ACTION, HardCoderJNI.hcEnterChattingAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_QUIT_CHATTING_ENABLE, HardCoderJNI.hcQuitChattingEnable);
        editor.putInt(HardCoderJNI.KEY_HC_QUIT_CHATTING_DELEY, HardCoderJNI.hcQuitChattingDelay);
        editor.putInt(HardCoderJNI.KEY_HC_QUIT_CHATTING_CPU, HardCoderJNI.hcQuitChattingCPU);
        editor.putInt(HardCoderJNI.KEY_HC_QUIT_CHATTING_IO, HardCoderJNI.hcQuitChattingIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_QUIT_CHATTING_THR, HardCoderJNI.hcQuitChattingThr);
        editor.putInt(HardCoderJNI.KEY_HC_QUIT_CHATTING_TIMEOUT, HardCoderJNI.hcQuitChattingTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_QUIT_CHATTING_ACTION, HardCoderJNI.hcQuitChattingAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_SEND_MSG_ENABLE, HardCoderJNI.hcSendMsgEnable);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_MSG_DELEY, HardCoderJNI.hcSendMsgDelay);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_MSG_CPU, HardCoderJNI.hcSendMsgCPU);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_MSG_IO, HardCoderJNI.hcSendMsgIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_SEND_MSG_THR, HardCoderJNI.hcSendMsgThr);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_MSG_TIMEOUT, HardCoderJNI.hcSendMsgTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_SEND_MSG_ACTION, HardCoderJNI.hcSendMsgAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_SEND_PIC_MSG_ENABLE, HardCoderJNI.hcSendPicMsgEnable);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_PIC_MSG_DELEY, HardCoderJNI.hcSendPicMsgDelay);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_PIC_MSG_CPU, HardCoderJNI.hcSendPicMsgCPU);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_PIC_MSG_IO, HardCoderJNI.hcSendPicMsgIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_SEND_PIC_MSG_THR, HardCoderJNI.hcSendPicMsgThr);
        editor.putInt(HardCoderJNI.KEY_HC_SEND_PIC_MSG_TIMEOUT, HardCoderJNI.hcSendPicMsgTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_SEND_PIC_MSG_ACTION, HardCoderJNI.hcSendPicMsgAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_RECEIVE_MSG_ENABLE, HardCoderJNI.hcReceiveMsgEnable);
        editor.putInt(HardCoderJNI.KEY_HC_RECEIVE_MSG_DELEY, HardCoderJNI.hcReceiveMsgDelay);
        editor.putInt(HardCoderJNI.KEY_HC_RECEIVE_MSG_CPU, HardCoderJNI.hcReceiveMsgCPU);
        editor.putInt(HardCoderJNI.KEY_HC_RECEIVE_MSG_IO, HardCoderJNI.hcReceiveMsgIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_RECEIVE_MSG_THR, HardCoderJNI.hcReceiveMsgThr);
        editor.putInt(HardCoderJNI.KEY_HC_RECEIVE_MSG_TIMEOUT, HardCoderJNI.hcReceiveMsgTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_RECEIVE_MSG_ACTION, HardCoderJNI.hcReceiveMsgAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_ENABLE, HardCoderJNI.hcUpdateChatroomEnable);
        editor.putInt(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_DELEY, HardCoderJNI.hcUpdateChatroomDelay);
        editor.putInt(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_CPU, HardCoderJNI.hcUpdateChatroomCPU);
        editor.putInt(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_IO, HardCoderJNI.hcUpdateChatroomIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_THR, HardCoderJNI.hcUpdateChatroomThr);
        editor.putInt(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_TIMEOUT, HardCoderJNI.hcUpdateChatroomTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_ACTION, HardCoderJNI.hcUpdateChatroomAction);
        editor.putLong(HardCoderJNI.KEY_HC_UPDATE_CHATROOM_MEMBER_COUNT, HardCoderJNI.hcUpdateChatroomMemberCount);
        editor.putBoolean(HardCoderJNI.KEY_HC_DB_ENABLE, HardCoderJNI.hcDBEnable);
        editor.putInt(HardCoderJNI.KEY_HC_DB_DELEY_QUERY, HardCoderJNI.hcDBDelayQuery);
        editor.putInt(HardCoderJNI.KEY_HC_DB_DELEY_WRITE, HardCoderJNI.hcDBDelayWrite);
        editor.putInt(HardCoderJNI.KEY_HC_DB_CPU, HardCoderJNI.hcDBCPU);
        editor.putInt(HardCoderJNI.KEY_HC_DB_IO, HardCoderJNI.hcDBIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_DB_THR, HardCoderJNI.hcDBThr);
        editor.putInt(HardCoderJNI.KEY_HC_DB_TIMEOUT, HardCoderJNI.hcDBTimeout);
        editor.putInt(HardCoderJNI.KEY_HC_DB_TIMEOUT, HardCoderJNI.hcDBTimeoutBusy);
        editor.putLong(HardCoderJNI.KEY_HC_DB_ACTION_QUERY, HardCoderJNI.hcDBActionQuery);
        editor.putLong(HardCoderJNI.KEY_HC_DB_ACTION_WRITE, HardCoderJNI.hcDBActionWrite);
        editor.putBoolean(HardCoderJNI.KEY_HC_ENCODE_VIDEO_ENABLE, HardCoderJNI.hcEncodeVideoEnable);
        editor.putInt(HardCoderJNI.KEY_HC_ENCODE_VIDEO_DELEY, HardCoderJNI.hcEncodeVideoDelay);
        editor.putInt(HardCoderJNI.KEY_HC_ENCODE_VIDEO_CPU, HardCoderJNI.hcEncodeVideoCPU);
        editor.putInt(HardCoderJNI.KEY_HC_ENCODE_VIDEO_IO, HardCoderJNI.hcEncodeVideoIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_ENCODE_VIDEO_THR, HardCoderJNI.hcEncodeVideoThr);
        editor.putInt(HardCoderJNI.KEY_HC_ENCODE_VIDEO_TIMEOUT, HardCoderJNI.hcEncodeVideoTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_ENCODE_VIDEO_ACTION, HardCoderJNI.hcEncodeVideoAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_DECODE_PIC_ENABLE, HardCoderJNI.hcDecodePicEnable);
        editor.putInt(HardCoderJNI.KEY_HC_DECODE_PIC_DELEY, HardCoderJNI.hcDecodePicDelay);
        editor.putInt(HardCoderJNI.KEY_HC_DECODE_PIC_CPU, HardCoderJNI.hcDecodePicCPU);
        editor.putInt(HardCoderJNI.KEY_HC_DECODE_PIC_IO, HardCoderJNI.hcDecodePicIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_DECODE_PIC_THR, HardCoderJNI.hcDecodePicThr);
        editor.putInt(HardCoderJNI.KEY_HC_DECODE_PIC_TIMEOUT, HardCoderJNI.hcDecodePicTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_DECODE_PIC_ACTION, HardCoderJNI.hcDecodePicAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_GIF_ENABLE, HardCoderJNI.hcGifEnable);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_DELEY, HardCoderJNI.hcGifDelay);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_CPU, HardCoderJNI.hcGifCPU);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_IO, HardCoderJNI.hcGifIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_GIF_THR, HardCoderJNI.hcGifThr);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_TIMEOUT, HardCoderJNI.hcGifTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_GIF_ACTION, HardCoderJNI.hcGifAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_GIF_FRAME_ENABLE, HardCoderJNI.hcGifFrameEnable);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_FRAME_DELEY, HardCoderJNI.hcGifFrameDelay);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_FRAME_CPU, HardCoderJNI.hcGifFrameCPU);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_FRAME_IO, HardCoderJNI.hcGifFrameIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_GIF_FRAME_THR, HardCoderJNI.hcGifFrameThr);
        editor.putInt(HardCoderJNI.KEY_HC_GIF_FRAME_TIMEOUT, HardCoderJNI.hcGifFrameTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_GIF_FRAME_ACTION, HardCoderJNI.hcGifFrameAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_SNS_SCROLL_ENABLE, HardCoderJNI.hcSNSScrollEnable);
        editor.putInt(HardCoderJNI.KEY_HC_SNS_SCROLL_DELEY, HardCoderJNI.hcSNSScrollDelay);
        editor.putInt(HardCoderJNI.KEY_HC_SNS_SCROLL_CPU, HardCoderJNI.hcSNSScrollCPU);
        editor.putInt(HardCoderJNI.KEY_HC_SNS_SCROLL_IO, HardCoderJNI.hcSNSScrollIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_SNS_SCROLL_THR, HardCoderJNI.hcSNSScrollThr);
        editor.putInt(HardCoderJNI.KEY_HC_SNS_SCROLL_TIMEOUT, HardCoderJNI.hcSNSScrollTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_SNS_SCROLL_ACTION, HardCoderJNI.hcSNSScrollAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_MEDIA_GALLERY_SCROLL_ENABLE, HardCoderJNI.hcMediaGalleryScrollEnable);
        editor.putInt(HardCoderJNI.KEY_HC_MEDIA_GALLERY_SCROLL_DELEY, HardCoderJNI.hcMediaGalleryScrollDelay);
        editor.putInt(HardCoderJNI.KEY_HC_MEDIA_GALLERY_SCROLL_CPU, HardCoderJNI.hcMediaGalleryScrollCPU);
        editor.putInt(HardCoderJNI.KEY_HC_MEDIA_GALLERY_SCROLL_IO, HardCoderJNI.hcMediaGalleryScrollIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_MEDIA_GALLERY_SCROLL_THR, HardCoderJNI.hcMediaGalleryScrollThr);
        editor.putInt(HardCoderJNI.KEY_HC_MEDIA_GALLERY_SCROLL_TIMEOUT, HardCoderJNI.hcMediaGalleryScrollTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_MEDIA_GALLERY_SCROLL_ACTION, HardCoderJNI.hcMediaGalleryScrollAction);
        editor.putBoolean(HardCoderJNI.KEY_HC_ALBUM_SCROLL_ENABLE, HardCoderJNI.hcAlbumScrollEnable);
        editor.putInt(HardCoderJNI.KEY_HC_ALBUM_SCROLL_DELEY, HardCoderJNI.hcAlbumScrollDelay);
        editor.putInt(HardCoderJNI.KEY_HC_ALBUM_SCROLL_CPU, HardCoderJNI.hcAlbumScrollCPU);
        editor.putInt(HardCoderJNI.KEY_HC_ALBUM_SCROLL_IO, HardCoderJNI.hcAlbumScrollIO);
        editor.putBoolean(HardCoderJNI.KEY_HC_ALBUM_SCROLL_THR, HardCoderJNI.hcAlbumScrollThr);
        editor.putInt(HardCoderJNI.KEY_HC_ALBUM_SCROLL_TIMEOUT, HardCoderJNI.hcAlbumScrollTimeout);
        editor.putLong(HardCoderJNI.KEY_HC_ALBUM_SCROLL_ACTION, HardCoderJNI.hcAlbumScrollAction);
        editor.apply();
    }

    protected final int getLayoutId() {
        return R.i.dlA;
    }

    private static String e(Context context, int i, int i2) {
        String e = w.e(context.getSharedPreferences(ac.cfs(), 0));
        String cfi = w.cfi();
        if (!e.equalsIgnoreCase("zh_CN") && (!e.equalsIgnoreCase("language_default") || !"zh_CN".equalsIgnoreCase(cfi))) {
            return DateFormat.getTimeInstance(3, w.UX(e)).format(new Time(i, i2, 0));
        }
        int i3;
        if (i > 12) {
            i3 = i - 12;
        } else {
            i3 = i;
        }
        return n.p(context, (((long) i) * 3600000) + (((long) i2) * 60000)) + String.format("%02d:%02d", new Object[]{Integer.valueOf(i3), Integer.valueOf(i2)});
    }
}
